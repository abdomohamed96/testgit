to publish web on github go setting ->pages ->modifiy branch form non to main the link will be ((https://abdomohamed96.github.io/rock_paper_scissors_JS/))
git braching 
You can make new branches by using the command git branch <branch_name>.
You can then change to your new branch using git checkout <branch_name>. 
You can also create a new branch and change to it in a single command by using the -b flag with checkout, in the form git checkout -b <branch_name>.


You can see all of your current branches using "git branch" with no other arguments. 
The branch that you’re currently on will be indicated with an asterisk. 
If you want to change back to main from any other branch, you can do so just like changing to any other branch using git checkout main.
git push origin rps-u push the brach to githun
Once you are done working on your feature branch and are ready to bring the commits that you’ve made on it to your main branch, you will need to perform what is known as a merge.
Merges are done by using the command git merge <branch_name> which will take the changes you’ve committed in branch_name and add them to the branch that you’re currently on.
You can see an example of a develop branch being created, committed to, and then merged to main in the diagram below.

Sometimes, the same lines in a file will have been changed by two different branches.
When this happens, you will have a merge conflict when you try and merge those branches together.
In order to finish merging the branches you will have to first resolve the conflict, which will be covered in a future lesson.

When you don’t need a branch anymore, it can be deleted using git branch -d <branch_name> if the branch has already been merged into main, or with git branch -D <branch_name> if it hasn’t. 
You will usually want to delete branches when you’re done with them, otherwise they can pile up and make it more difficult to find the branch you’re looking for when you need it.
git push origin + name of branch to apear on github.
to merge 
1-git checkout main to move to main branch 
 then git merge rps-ui --> the name of brach to be merged 
 Use git log and you’ll see all the commits you’ve made to your feature branch on top of the commits you made to the main branch.
Let’s push our main branch into our remote repo by running ((git push origin main)) . Go to your GitHub repo and you’ll see that our main branch will have all the changes and commits you made to the rps-ui branch.
Delete the branch from our local repo with (((git branch -d rps-ui )))and also delete it from the remote repo on GitHub with (((git push --delete origin rps-ui)))


how to add folder to a certain repo 
git init 
git commit
make new rep
git remote add origin +https from github
git push -u orgin main


after each before each pull make any change and commit it to save you code 
if you pull any branch it pull
git reset +[optionfile]-> unstageing this optionfile otherwise the whole folder will be unstaged
git diff show the difference I'am working in now before staging  and the code in the last stage
git reset --hard + commit hash to go back to this commit and remove all unstages and staged 
git diff + filename gives you differnce between this file and last staging area 
git add -p filename add certain part of file 
git branch nameOFnewbranch nameOfparentbranch 
git checkout -b nameOFnewbranch nameOfparentbranch to move to this new child branch 

